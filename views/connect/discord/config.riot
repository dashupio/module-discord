<connect-discord-config>
  <div class="card mb-3">
    <div class="card-header">
      <b>Discord Connector</b>
    </div>
    <div if={ !props.connect.guild } class="card-body">
      <button onclick={ (e) => onConnect(e) } class="btn btn-dark">
        <i class="fab fa-discord mr-2" />
        Invite Discord Bot
      </button>
    </div>
    <div if={ props.connect.guild } class="card-body">
      
      <div if={ state.loading.guild } class="text-center">
        <i class="h1 fa fa-spinner fa-spin my-5" />
      </div>

      <div if={ state.info && !state.loading.guild }>
        <div class="d-flex flex-row align-items-center mb-4">
          <img if={ state.info.image } src={ state.info.image } class="img-fluid img-avatar rounded-circle mr-2" />
          <span>
            Discord Server:
            <b class="m-0">
              { state.info.name || 'Loading...' }
            </b>
          </span>
          <button class="btn btn-info ml-auto" onclick={ (e) => build() }>
            <i class="fa fa-sync" />
          </button>
        </div>

        <div if={ state.info && state.info.channels && state.info.channels.length } class="mb-3">
          <label class="form-label">
            Select Channel
          </label>
          <eden-select on-change={ (e, v) => onChannel(v) } placeholder="Select Channel" data={ getChannels() } />
        </div>

        <div>
          <label class="form-label">
            Select Direction
          </label>
          <eden-select on-change={ (e, v) => onDirection(v) } placeholder="Select Direction" data={ getDirections() } />
        </div>
      </div>

    </div>
  </div>

  <script>
    // import base
    import { windowPopup } from 'window-popup';

    /**
     * export default
     */
    export default class ConnectorDiscordConfig {

      /**
       * on connect
       */
      onBeforeMount(...args) {
        // set loading
        this.state.loading = {};

        // bind build
        this.build = this.build.bind(this);
      }

      /**
       * on connect
       */
      onMounted(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // build
        this.build();
      }

      /**
       * on connect
       */
      onUpdated(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // build
        // this.build();
      }

      /**
       * build
       */
      async build (force) {
        // check info
        if (this.props.connect.guild && (force || (!(this.state.info || {}).guild && !this.state.loading.guild))) {
          // update info
          this.state.loading.guild = true;
          this.update();

          // timeout
          setTimeout(() => {
            // reset loading
            if (this.state.loading.guild) {
              // reset loading
              this.state.loading.guild = false;
              this.update();
            }
          }, 5 * 1000);

          // call socket
          this.update({
            info : await eden.socket.call('dashup.connect.action', this.props.page.get('_id'), 'guild', this.props.connect, {})
          });

          // update info
          this.state.loading.guild = false;
          this.update();
        }
      }

      /**
       * on connect
       */
      onChannel(val) {
        // get value
        if (!val) val = this.refs.channel.val();

        // channel
        const channel = ((this.state.info || {}).channels || []).find((c) => c.id === val);
        
        // set channel
        this.props.set('title', `${this.state.info.name}: #${channel.name}`);
        this.props.set('channel', val);
      }

      /**
       * on connect
       */
      onDirection(val) {
        // get value
        if (!val) val = this.refs.direction.val();
        
        // set channel
        this.props.set('direction', val);
      }

      /**
       * on connect
       */
      onConnect(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // window popup
        const w = windowPopup(500, 700, this.getInviteURL(), 'Connect Discord');
      }

      /**
       * get bot url
       */
      getInviteURL() {
        // get url
        let url = 'https://discord.com/oauth2/authorize?client_id=733158865633411134&scope=bot%20identify&permissions=67492928&response_type=code';

        // redirect uri
        url = url + `&redirect_uri=${encodeURIComponent(`https://${window.location.hostname}/connect/${this.props.connect.type}`)}`;
        url = url + `&state=${this.props.page.get('_id')}:${this.props.connect.uuid}`;

        // return url
        return url;
      }

      /**
       * get channels
       */
      getDirections() {
        // return value
        return [['Both Ways', 'both'], ['Discord => Dashup only', 'discord'], ['Dashup => Discord only', 'dashup']].map((sync) => {
          // return channel
          return {
            text     : sync[0],
            value    : sync[1],
            selected : this.props.connect.direction === sync[1],
          };
        });
      }

      /**
       * get channels
       */
      getChannels() {
        // return value
        return ((this.state.info || {}).channels || []).map((channel) => {
          // return channel
          return {
            text     : `#${channel.name}`,
            value    : channel.id,
            selected : this.props.connect.channel === channel.id,
          };
        });
      }
    }
  </script>
</connect-discord-config>